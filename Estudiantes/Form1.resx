<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACYAAABOAAAATgAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AFoAAADOAAAA/wAAAP8AAAD/AAAA/wAAAM4AAABcAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACIAAADEAAAA/wAAAP8AAAD/AAAA5AAAAOQAAAD/AAAA/wAAAP8AAADGAAAAJAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA2AAAA6gAAAP8AAAD8AAAAoAAAADAAAAAAAAAAAAAAAC4AAACeAAAA+gAAAP8AAADsAAAAOgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAJAAAAOwAAAD/AAAA4gAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAA4gAA
        AP8AAADuAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAADEAAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA3gAAAP8AAADKAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AOIAAAD/AAAA5gAAAI4AAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAAAAAAAAAAAAAAAAAAAAAA
        ADAAAACMAAAA5gAAAP8AAADmAAAAAAAAACYAAAD4AAAA/wAAAPwAAAA4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAjgAAAEoAAAAEAAAAAAAAAAAAAAAAAAAAEAAAAGIAAAC4AAAA+AAAAPoAAAC6AAAAZAAA
        ABIAAAAAAAAAAAAAAAAAAAAEAAAASAAAAJAAAAAAAAAAAAAAAKgAAAD/AAAAzAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAVgAAAK4AAAD2AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA9gAAALAAAABWAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAADKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABGAAAAoAAAAPAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADwAAAAoAAAAEYAAAAEAAAAAAAAAAAAAACqAAAA/wAA
        AMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYAAACQAAAA5gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOgAAACUAAAAPAAA
        AMwAAAD/AAAAugAAAAAAAAAAAAAAJAAAAH4AAADYAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAACMAAAAAAAAAKAAAAD8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/AAAANwAAADeAAAA/AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACmAAAAuAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABsAAAAAAAAAAAAAABqAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALwAAAACAAAANgAAAH4AAADGAAAA+gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPYAAADCAAAAwgAAAPYAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD6AAAAxgAAAHwAAAAwAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAUAAAAWgAAAKIAAADoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOgAAACiAAAAWAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAA0AAAAfAAAAMQAAAD6AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD6AAAAxAAAAHwAAAA0AAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABUAAAAnAAA
        AOAAAAD/AAAA/wAAAOAAAACaAAAAVAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACQAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////4H///4Af//8PD//+P8f//H/j//z/8//4//H/8f/4/+P//H/Hv
        94/zx+PP88fjz/Hn54v4//8R+Pw/EfwAADH8AYAx/A/wMfw//DH9/D+x/+AH8f8AAPH4AAAR4AAAAQAA
        AAAAA8AA4AAAB/wAAD//wAP///gf//////8=
</value>
  </data>
</root>